name: Deploy to ECR

on:
 
  push:
    branches: [ main ]
env:
  TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
  TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
  BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
jobs:
  
  build:
    
    name: Build Image
    runs-on: ubuntu-latest

   
    steps:

    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
        TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        ECR_REPOSITORY: tele_bahn_demo
        IMAGE_TAG: tele_bahn_image
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy task definition to Amazon ECS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
        TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        ECR_REPOSITORY: tele_bahn_demo
        IMAGE_TAG: tele_bahn_image
        CLUSTER_NAME: Main
        TASK_FAMILY: seinaru
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: my_task_definition.json
        container-name: Main
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        cluster: ${{ env.CLUSTER_NAME }}
        task-family: ${{ env.TASK_FAMILY }}
